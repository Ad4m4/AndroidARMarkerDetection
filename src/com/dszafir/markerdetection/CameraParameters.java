package com.dszafir.markerdetection;

import java.io.File;
import java.io.IOException;
import java.util.StringTokenizer;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfDouble;
import org.opencv.core.Size;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;


/**
 * Camera parameters (camera and distortion coefficient matrices). 
 * They will be loaded from an xml file which should match the output
 * of the OpenCV Camera Calibration program.
 * 
 * @author Dan Szafir, based on Aruco CameraParameters class by Rafael Ortega
 */
public class CameraParameters {

	// cameraMatrix will be of the form
	// | Fx 0  Cx |
	// | 0  Fy Cy |
	// | 0  0   1 |
	private Mat cameraMatrix;
	private MatOfDouble distortionMatrix;
	private Size camSize;
	
	public CameraParameters(){
		cameraMatrix = new Mat(3,3,CvType.CV_32FC1);
		distortionMatrix = new MatOfDouble();
	}
	
    /**
     * Indicates whether this object is valid
     */
	public boolean isValid(){
		return cameraMatrix != null && cameraMatrix.rows()!=0 && cameraMatrix.cols()!=0  && 
				distortionMatrix.total() > 0;
	}

	public Mat getCameraMatrix(){
		return cameraMatrix;
	}
	
	public MatOfDouble getDistCoeff(){
		return distortionMatrix;
	}
	
	public void resize(Size size) throws Exception{
	    if (!isValid()) 
	    	throw new Exception("Can't resize - CameraParameters are invalid (have you initialized by calling readFromXML?)");
	    if (size == camSize)
	    	return;
	    
	    //now, read the camera size
	    //resize the camera parameters to fit this image size
	    float AxFactor= (float)(size.width)/ (float)(camSize.width);
	    float AyFactor= (float)(size.height)/ (float)(camSize.height);
		float[] current = new float[9];
	    cameraMatrix.get(0, 0, current);
		float[] buff = {current[0]*AxFactor, current[1],          current[2]*AxFactor,
				        current[3],          current[4]*AyFactor, current[5],
				        current[6],          current[7],          current[8]};
		cameraMatrix.put(0, 0, buff);
	}
	
	/**
	 * Parses an xml camera configuration file expected to be of a format generated by 
	 * the OpenCV camera calibration program
	 * (http://docs.opencv.org/doc/tutorials/calib3d/camera_calibration/camera_calibration.html)
	 * @param filepath
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * @throws IOException
	 */
	public void readFromXML(String filepath) throws ParserConfigurationException, SAXException, IOException{
		File file = new File(filepath);
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		Document doc = dBuilder.parse(file);
		doc.getDocumentElement().normalize();
		
		NodeList nList = doc.getElementsByTagName("Camera_Matrix");
		Node node = nList.item(0);

		if (node.getNodeType() == Node.ELEMENT_NODE) {

			Element element = (Element) node;

			NodeList dataList = element.getElementsByTagName("data");
			Element dataElement = (Element)dataList.item(0);
			NodeList dataTextList = dataElement.getChildNodes();
			String data = ((Node)dataTextList.item(0)).getNodeValue().trim();

			StringTokenizer st = new StringTokenizer(data);
			double[] array = new double[9];
			int i = 0;
			while(st.hasMoreElements()){
				array[i] = Double.valueOf(st.nextToken());
				i++;
			}
			cameraMatrix.put(0, 0, array[0], array[1], array[2],
					array[3], array[4], array[5],
					array[6], array[7], array[8]);

		}
		
		nList = doc.getElementsByTagName("Distortion_Coefficients");
		node = nList.item(0);

		if (node.getNodeType() == Node.ELEMENT_NODE) {

			Element element = (Element) node;

			NodeList dataList = element.getElementsByTagName("data");
			Element dataElement = (Element)dataList.item(0);
			NodeList dataTextList = dataElement.getChildNodes();
			String data = ((Node)dataTextList.item(0)).getNodeValue().trim();
			
			StringTokenizer std = new StringTokenizer(data);
			double[] coeffArray = new double[5];
			int i = 0;
			while(std.hasMoreElements()){
				coeffArray[i] = Double.valueOf(std.nextToken());
				i++;
			}
			distortionMatrix.fromArray(coeffArray);	
		}
	}
	
//	public void readFromXML(String filepath){		
//		File file = new File(filepath);
//
//		Configuration conf;
//		try {
//			conf = new XMLConfiguration(file);
////			Configuration cameraConf = conf.subset("camera_matrix");
//			Configuration cameraConf = conf.subset("Camera_Matrix");
//			String data = new String();
//			data = cameraConf.getString("data");
//			StringTokenizer st = new StringTokenizer(data);
//			double[] array = new double[9];
//			int i = 0;
//			while(st.hasMoreElements()){
//				array[i] = Double.valueOf(st.nextToken());
//				i++;
//			}
//			cameraMatrix.put(0, 0, array[0], array[1], array[2],
//								   array[3], array[4], array[5],
//								   array[6], array[7], array[8]);
//			// parse the distorsion matrix
////			Configuration distortionConf = conf.subset("distortion_coefficients");
//			Configuration distortionConf = conf.subset("Distortion_Coefficients");
//			String coeffData = new String();
//			coeffData = distortionConf.getString("data");
//			StringTokenizer std = new StringTokenizer(coeffData);
//			double[] coeffArray = new double[5];
//			i = 0;
//			while(std.hasMoreElements()){
//				coeffArray[i] = Double.valueOf(std.nextToken());
//				i++;
//			}
//			distorsionMatrix.fromArray(coeffArray);	
//		} catch (ConfigurationException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//	}
}
